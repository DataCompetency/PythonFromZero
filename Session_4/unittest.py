# DO NOT EDIT THIS FILE!
# THIS FILE CONTAINS CODE TO CHECK IF YOUR SOLUTIONS ARE VALID!

def _check_cards_in_list(cards):
    for i in range(len(cards)):
        assert type(cards[i]) is tuple, "[Failed] Your card list elements should be of class (or type) 'tuple', but the {}-th element is '{}'".format(i, type(cards[i]))
        assert len(cards[i]) == 3, "[Failed] Each card list element should be a tuple of 3 values, but the {}-th element has {} values".format(i, len(cards[i]))
        assert type(cards[i][0]) is str, "[Failed] The first tuple element should be of class (or type) 'str', but in the {}-th tuple it's '{}'".format(i, type(cards[i][0]))
        assert type(cards[i][1]) is str, "[Failed] The second tuple element should be of class (or type) 'str', but in the {}-th tuple it's '{}'".format(i, type(cards[i][1]))
        assert type(cards[i][2]) is int, "[Failed] The third tuple element should be of class (or type) 'int', but in the {}-th tuple it's '{}'".format(i, type(cards[i][2]))
        

def check_task_1(cards):
    assert type(cards) is list, "[Failed] Your list should be of class (or type) 'list'! Yours is '{}'".format(type(cards))
    assert len(cards) == 52, "[Failed] Your list should contain 52 cards, not {}".format(len(cards))
    _check_cards_in_list(cards)
    
    target = []
    for color in ["hearts", "tiles", "clubs", "spades"]:
        for image in ["ace", "king", "queen", "jack", "10", "9", "8", "7", "6", "5", "4", "3", "2"]:
            if image == 'ace':
                target.append((color, image, 11))
            elif image in ["king", "queen", "jack"]:
                target.append((color, image, 10))
            else:
                target.append((color, image, int(image)))
                
    assert sorted(cards) == sorted(target), "[Failed] Your list seems to have incorrect cards. It should look like this: {}".format(sorted(target))
    
    print("[Passed] Congratulations, your card list is correct!")
    
    
    
def check_task_3(player_hand, dealer_hand):
    assert type(player_hand) is list, "[Failed] Your player_hand should be of class (or type) 'list'! Yours is '{}'".format(type(player_hand))
    assert len(player_hand) == 0, "[Failed] Your player_hand should contain 0 cards, not {}".format(len(player_hand))
    assert type(dealer_hand) is list, "[Failed] Your dealer_hand should be of class (or type) 'list'! Yours is '{}'".format(type(dealer_hand))
    assert len(dealer_hand) == 0, "[Failed] Your dealer_hand should contain 0 cards, not {}".format(len(dealer_hand))
    
    print("[Passed] Congratulations, your hand lists are correct!")
    
    
    
def check_task_4(player_hand, dealer_hand, card_deck):
    assert type(player_hand) is list, "[Failed] Your player_hand should be of class (or type) 'list'! Yours is '{}'".format(type(player_hand))
    assert len(player_hand) == 2, "[Failed] Your player_hand should contain 2 cards, not {}".format(len(player_hand))
    _check_cards_in_list(player_hand)
    assert type(dealer_hand) is list, "[Failed] Your dealer_hand should be of class (or type) 'list'! Yours is '{}'".format(type(dealer_hand))
    assert len(dealer_hand) == 1, "[Failed] Your dealer_hand should contain 1 card, not {}".format(len(dealer_hand))
    _check_cards_in_list(dealer_hand)
    
    assert type(card_deck) is list, "[Failed] Your card_deck should be of class (or type) 'list'! Yours is '{}'".format(type(card_deck))
    assert len(card_deck) == 49, "[Failed] Your card_deck should now contain only 49 cards, not {}".format(len(card_deck))
    _check_cards_in_list(card_deck)        
    
    print("[Passed] Congratulations, your hand lists and card deck are correct!")
    

    
def check_task_5_1(hand, value):
    assert type(hand) is list, "[Failed] Your hand should be of class (or type) 'list'! Yours is '{}'".format(type(hand))
    assert len(hand) >= 1, "[Failed] Your hand should contain at least 1 card, not {}".format(len(hand))
    assert value is not None, "[Failed] Your function does not return anything"
    assert type(value) is int, "[Failed] Your function should return an int, not {}".format(type(value))
    _check_cards_in_list(hand)
    true_val = sum([card[2] for card in hand])
    assert value == true_val, "[Failed] Your hand has a value of {}, but your function computed {}".format(true_val, value)
    
    print("[Passed] Congratulations, your function computes the correct hand value!")